
Texture2D g_txDiffuse : register(t0);
//TextureCube g_txDiffuse : register(t0);
SamplerState sample0 : register(s0);

struct PS_INPUT
{
	float4 Position		: SV_POSITION;
	float3 Normal		: NORMAL;
	float4 Color		: COLOR0;
	float2 Texture		: TEXTUREO;
};

struct VS_OUTstruct
{
	float4 Position		: SV_POSITION;
	float3 Normal		: NORMAL;
	float4 Color		: COLOR0;
	float2 Texture		: TEXTUREO;
	///
	float4 Diffuse		: TEXTURE1;
};
cbuffer cb0 : register(b0)
{
	matrix g_MatWorld : packoffset(c0);
	matrix g_MatView : packoffset(c4);
	matrix g_MatProj : packoffset(c8);
	float4 g_Color : packoffset(c12);
	float g_fTime : packoffset(c13.x);
}
cbuffer cb1 : register(b1)
{
	matrix	matWorldInverse : packoffset(c0);

	float4	AmbientMaterial : packoffset(c4);
	float4	DiffuseMaterial : packoffset(c5);

	float4	AmbientLight : packoffset(c6);
	float4	DiffuseLight : packoffset(c7);

	float4	LightPos : packoffset(c8);		//순서바뀜 시연
	float3	LightDir : packoffset(c9);
}


float4 PS(PS_INPUT input) : SV_TARGET
{

	return g_txDiffuse.Sample(sample0, input.Texture) * input.Color;

}

float4 Diffuse(float3 vNormal)
{
	float fIntensity = max(0, dot(vNormal, normalize(-LightDir)));
	float4 diffuse = AmbientMaterial * AmbientLight + (DiffuseMaterial * DiffuseLight * fIntensity);
	return diffuse;
}
float4 PS_Test(VS_OUTstruct input) : SV_Target
{
	//float4 vTexColor = g_txDiffuse.Sample(sample0, input.Normal);
	
	float4 vTexColor = g_txDiffuse.Sample(sample0, input.Texture);
	float4 vFinalColor = vTexColor * Diffuse(input.Normal) * input.Color;
	//return vFinalColor;
	return vTexColor * input.Color;
}
float4 PS_Screen(VS_OUTstruct input) : SV_Target
{
	//float4 vTexColor = g_txDiffuse.Sample(sample0, input.Normal);

	float4 vTexColor = g_txDiffuse.Sample(sample0, input.Texture);

	return vTexColor;
}
float4 PS_Line(PS_INPUT input) : SV_TARGET
{
	return input.Color;
}

float4 PS_Debug(PS_INPUT input) : SV_TARGET
{
	return g_Color;
}

//아래 형식도 가능.
//float4 PS(in float4 Position		: SV_POSITION,
//	in float2 Texture : TEXTURE_O) : SV_TARGET
//{
//	return g_txDiffuse.Sample(sample0, Texture);
//}

float4 PS_Shadow(PS_INPUT input) : SV_Target
{
	return g_Color;
//return float4(1.0f,1.0f,1.0f,1.0f);
}